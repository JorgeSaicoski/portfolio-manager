services:
  # Database
  portfolio-postgres:  
    image: postgres:16-alpine
    container_name: portfolio-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      POSTGRES_USER: ${POSTGRES_USER:-portfolio_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-portfolio_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-portfolio_user} -d ${POSTGRES_DB:-portfolio_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Authentik
  portfolio-redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    restart: unless-stopped
    command: --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Authentik Server
  portfolio-authentik-server:
    image: ghcr.io/goauthentik/server:2024.2.3
    container_name: portfolio-authentik-server
    restart: unless-stopped
    command: server
    ports:
      - "9000:9000"
      - "9443:9443"
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:-change-me-to-a-random-string}
      AUTHENTIK_REDIS__HOST: portfolio-redis
      AUTHENTIK_POSTGRESQL__HOST: portfolio-postgres
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-portfolio_user}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD:-portfolio_pass}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_LOG_LEVEL: ${AUTHENTIK_LOG_LEVEL:-info}
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
    depends_on:
      portfolio-postgres:
        condition: service_healthy
      portfolio-redis:
        condition: service_healthy
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/-/health/live/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 50s

  # Authentik Worker
  portfolio-authentik-worker:
    image: ghcr.io/goauthentik/server:2024.2.3
    container_name: portfolio-authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:-change-me-to-a-random-string}
      AUTHENTIK_REDIS__HOST: portfolio-redis
      AUTHENTIK_POSTGRESQL__HOST: portfolio-postgres
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-portfolio_user}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD:-portfolio_pass}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_LOG_LEVEL: ${AUTHENTIK_LOG_LEVEL:-info}
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      portfolio-postgres:
        condition: service_healthy
      portfolio-redis:
        condition: service_healthy
    networks:
      - portfolio-network


  # Backend API Service
  portfolio-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - GIN_MODE=release
      - LOG_LEVEL=info
      - DB_HOST=portfolio-postgres 
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-portfolio_db}
      - DB_USER=${POSTGRES_USER:-portfolio_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-portfolio_pass}
      - DB_SSLMODE=disable
      - DB_TIMEZONE=UTC
      - AUTHENTIK_URL=http://portfolio-authentik-server:9000
      - AUTHENTIK_ISSUER=${AUTHENTIK_ISSUER:-http://localhost:9000/application/o/portfolio-manager/}
    depends_on:
      portfolio-postgres:
        condition: service_healthy
      portfolio-authentik-server:
        condition: service_healthy
    networks:
      - portfolio-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  portfolio-frontend:  
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: portfolio-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8000/api
      - VITE_AUTHENTIK_URL=http://localhost:9000
      - VITE_AUTHENTIK_CLIENT_ID=portfolio-manager
      - VITE_AUTHENTIK_REDIRECT_URI=http://localhost:3000/auth/callback
      - VITE_AUTHENTIK_ISSUER=http://localhost:9000/application/o/portfolio-manager/
    depends_on:
      - portfolio-authentik-server
      - portfolio-backend
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Monitoring Profile
  prometheus:
    image: prom/prometheus:latest
    container_name: portfolio-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:Z
      - prometheus_data:/prometheus
    networks:
      - portfolio-network
    user: "65534:65534"  # nobody user

  # Grafana - Monitoring Profile
  grafana:
    image: grafana/grafana:latest
    container_name: portfolio-grafana
    restart: unless-stopped
    profiles:
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - portfolio-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  authentik_media:
    driver: local
  authentik_templates:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  portfolio-network:
    driver: bridge
