name: Backend Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: read        # Read repository contents
      pull-requests: write  # Write comments on PRs
      issues: write         # Write comments on issues

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: portfolio_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
          cache-dependency-path: backend/go.sum

      - name: Verify dependencies
        working-directory: backend
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum || (echo "go.mod or go.sum needs updates. Run 'go mod tidy' locally." && exit 1)

      - name: Install dependencies
        working-directory: backend
        run: go mod download

      - name: Run tests
        working-directory: backend
        env:
          # Database Configuration (matches what the app expects)
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: portfolio_test
          DB_USER: test_user
          DB_PASSWORD: test_pass
          DB_SSLMODE: disable
          DB_TIMEZONE: UTC
          # Test Configuration
          TESTING_MODE: true
          GIN_MODE: test
          LOG_LEVEL: error
          PORT: 8888
          JWT_SECRET: test-jwt-secret-for-ci
        run: go test ./cmd/test/... -v -race -coverprofile=coverage.out

      - name: Generate coverage report
        working-directory: backend
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out > coverage.txt
          cat coverage.txt

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            backend/coverage.html
            backend/coverage.txt

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('backend/coverage.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Test Coverage\n\`\`\`\n${coverage}\n\`\`\``
            });
